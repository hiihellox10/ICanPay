#labels 如何使用
= 如何使用 =


 * [http://code.google.com/p/icanpay/wiki/ICanPay1#简单的例子 简单的例子]
  *  [http://code.google.com/p/icanpay/wiki/ICanPay1#使用ICanPay生成付款的订单 使用ICanPay生成付款的订单]
  *  [http://code.google.com/p/icanpay/wiki/ICanPay1#查询订单 查询订单]
  *  [http://code.google.com/p/icanpay/wiki/ICanPay1#处理网关订单支付通知 处理网关订单支付通知]
 * [http://code.google.com/p/icanpay/wiki/ICanPay1#可能遇到的问题 可能遇到的问题]


----


= 简单的例子 =
 === 使用ICanPay生成付款的订单 ===
{{{
using ICanPay;
using ICanPay.Providers;


namespace Demo
{
    public partial class Pay : System.Web.UI.Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {
            // 设置付款数据
            PaymentSetting<YeepayGateway> ps = new PaymentSetting<YeepayGateway>();
            ps.PayGateway.Merchant.UserName = "10000432521";
            ps.PayGateway.Merchant.Key = "8UPp0KE8sq73zVP370vko7C39403rtK1YwX40Td6irH216036H27Eb12792t";
            ps.PayGateway.Merchant.NotifyUrl = "http://yousite.com/Notify.aspx";
            ps.PayGateway.Order.OrderId = "1564515";
            ps.PayGateway.Order.Amount = 0.01;
            ps.PayGateway.Customer.Name = "name";
            ps.PayGateway.Customer.Email = "name@address.com";
            ps.PayGateway.Customer.Address = "my address"; ;
            ps.PayGateway.Customer.Post = "4564565";
            ps.PayGateway.Customer.Telephone = "1568847888";

            // 转到支付网站付款
            ps.Payment();
        }
    }
}
}}}

在上面的代码我们使用了易宝YeepayGateway的支付网关，并设置了商户的密钥跟订单的数据。*在生成订单所需的数据中Merchant、Order是必需的。*
{{{
PaymentSetting<YeepayGateway> ps = new PaymentSetting<YeepayGateway>();
}}}

然后我们通过Payment方法来生成订单，并转移到支付网关的网站付款。
{{{
ps.Payment();
}}}


----

 === 查询订单 ===

 查询订单有2种不同的方式。

第一种，查询订单跟提交订单的使用类似。同上，因为不同的网关可能支持Form或者Url提交查询，然后网关服务器给指定页面返回查询结果，然后你可以使用处理网关服务器返回付款通知一样的方法来处理订单的查询。

如下代码演示了提交一个查询
{{{
// 设置需要查询的订单
PaymentSetting<ChinabankGateway> ps = new PaymentSetting<ChinabankGateway>();
ps.PayGateway.Merchant.UserName = "10000432521";
ps.PayGateway.Merchant.Key = "8UPp0KE8sq73zVP370vko7C39403rtK1YwX40Td6irH216036H27Eb12792t";
ps.PayGateway.Merchant.NotifyUrl = "http://yousite.com/Notify.aspx";
ps.PayGateway.Order.OrderId = "1564515";

// 创建查询订单的Form提交查询
Response.Write(ps.PayGateway.BuildQueryForm());
}}}

第二种，因为有的网关服务器是通过向网关服务器POST数据后，网关通过返回HTTP流的方式来返回结果。这种类型的网关都实现了ICheckPayment接口。

实现了ICheckPayment接口的网关，这么查询订单的状态
{{{
PaymentSetting<YeepayGateway> ps = new PaymentSetting<YeepayGateway>();
ps.PayGateway.Merchant.UserName = "10000432521";
ps.PayGateway.Merchant.Key = "8UPp0KE8sq73zVP370vko7C39403rtK1YwX40Td6irH216036H27Eb12792t";
ps.PayGateway.Order.OrderId = "1564515";
ps.PayGateway.Order.Amount = 0.01;

if(ps.PayGateway.CheckPayment())
{
    // 订单已支付
}
}}}

----


 === 处理网关订单支付通知 ===

在同一个页面接收多个不同的网关返回的付款通知，如下代码：
{{{
using ICanPay;

namespace Demo
{
    public partial class Notify : System.Web.UI.Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {
            GetNotify();
        }

        private void GetNotify()
        {
            // 商户的帐号跟密钥
            Merchant yeepayMerchant = new Merchant();
            yeepayMerchant.UserName = "10000432521";
            yeepayMerchant.Key = "8UPp0KE8sq73zVP370vko7C39403rtK1YwX40Td6irH216036H27Eb12792t";


            Merchant chinabankMerchat = new Merchant();
            chinabankMerchat.UserName = "00000000000";
            chinabankMerchat.Key = "0000000000000000000000000000000000000000000";

            PaymentNotify paymentNotify = PayGatewayFactory.GetGatewayNotify();

            // 没有收到可识别的网关通知
            if (paymentNotify == null)
            {
                return;
            }

            // 使用相应网关的商户数据以验证通知数据是否正确
            switch (paymentNotify.PayGateway.GatewayName)
            {
                case GatewayType.ChinaBank:
                    paymentNotify.PayGateway.Merchant = chinabankMerchat;

                    // 如果你知道服务器的网关IP，并且想加强安全性。
                    // 可以设置验证发送通知服务器的IP地址，并添加允许的服务器IP地址。
                    paymentNotify.PayGateway.ValidateNotifyHostServerAddress = true;
                    paymentNotify.PayGateway.SafeAddress.Add("129.1.12.52");
                    paymentNotify.PayGateway.SafeAddress.Add("129.1.12.51");
                    paymentNotify.PayGateway.SafeAddress.Add("129.1.12.50");
                    break;
                case GatewayType.YeePay:
                    paymentNotify.PayGateway.Merchant = yeepayMerchant;
                    break;
            }

            if (paymentNotify.HasNotify)
            {
                double amount = paymentNotify.PayGateway.Order.Amount;
                string orderId = paymentNotify.PayGateway.Order.OrderId;

                // 判断amount、orderId跟数据库订单记录是否符合，再处理付款。
            }
        }
    }
}

}}}

首先需要不同网关的不同商户数据，将用于核对订单的签名是否正确。

PayGatewayFactory的GetGatewayNotify方法将识别并创建正确的网关实现类。
{{{
PaymentNotify paymentNotify = PayGatewayFactory.GetGatewayNotify();
}}}

在使用之前需要知道是否接收到了可支持的网关返回的通知，如果没有接收到可识别的通知paymentNotify将为null 
{{{
paymentNotify == null
}}}

添加允许的IP地址，验证通知服务器的IP是否在内，以加强安全性。
{{{
paymentNotify.PayGateway.ValidateNotifyHostServerAddress = true;
paymentNotify.PayGateway.SafeAddress.Add("129.1.12.52");
paymentNotify.PayGateway.SafeAddress.Add("129.1.12.51");
paymentNotify.PayGateway.SafeAddress.Add("129.1.12.50");
}}}


验证接收到的网关通知是否正确，通知正确在这里做收到付款的逻辑处理。
{{{
if (paymentNotify.HasNotify)
{
    double amount = paymentNotify.PayGateway.Order.Amount;
    string orderId = paymentNotify.PayGateway.Order.OrderId;
    // 判断amount、orderId跟数据库订单记录是否符合，再处理付款。
}
}}}

----
= 可能遇到的问题 =

如果你提交的订单出现乱码，可能是你的页面不是GB2312编码导致的。因为国内的网关普遍是使用GB2312编码，所以你也要使用GB2312编码来提交订单跟接受网关返回的通知，如果你使用的是其他编码就会出现乱码。

*解决方法*

你可以通过在Web.config文件的configuration/system.web节点增加以下代码，可以设置默认编码为GB2312
{{{
<globalization requestEncoding="gb2312" responseEncoding="gb2312" />
}}}

如果你的系统需要使用其它编码而不能使用GB2312编码，你可以新建一个用于提交订单跟接受网关通知的新文件夹。并在这个文件夹中增加一个web.config文件，并将提交订单跟接受网关通知的页面放置在这个文件夹中，然后跟上面的解决方法一样在这个web.config文件的configuration/system.web节点中增加上面的代码，这样就可以使得只有这个文件夹中的页面使用GB2312编码，而其他页面将使用其他的编码。