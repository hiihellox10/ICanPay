= 如何使用 =

 * [http://code.google.com/p/icanpay/wiki/GettingStarted#介绍 介绍]
 * [http://code.google.com/p/icanpay/wiki/GettingStarted#使用ICanPay创建付款的订单 使用ICanPay创建付款的订单]
 * [http://code.google.com/p/icanpay/wiki/GettingStarted#处理网关订单支付通知 处理网关订单支付通知]
 * [http://code.google.com/p/icanpay/wiki/GettingStarted#查询订单 查询订单]


----

= 介绍 =
ICanPay仅支持人民币支付。为了能够支持多个支付网关，创建支付网关订单的页面跟接收支付网关支付通知的页面均使用GB2312编码。如果使用其他编码可能会造成异常。

如果你的程序需要使用其它编码而不能使用GB2312编码，你可以在程序里新建一个用于提交订单跟接受网关通知的新文件夹。然后将提交订单跟接受网关通知的页面放置在这个文件夹中，接着这个文件夹中增加一个Web.config文件，修改Web.config文件。在的configuration/system.web节点中增加下面的代码，这样就可以使得只有这个文件夹中的页面使用GB2312编码，而其他页面将使用其他的编码。
{{{
<globalization requestEncoding="gb2312" responseEncoding="gb2312" />
}}}

----

= 使用ICanPay创建付款的订单 =

下面将演示如使用ICanPay创建一个支付订单。首先你需要创建一个名为Payment的Web 窗体，Payment.aspx页面仅保留如下代码：
{{{
<%@ Page Language="C#" AutoEventWireup="true" CodeBehind="Payment.aspx.cs" Inherits="Demo.Payment" %>
}}}
这样的目的是因为实现了IPaymentForm接口的支付网关在创建订单时会生成并输出完整的Form表单，如果当前页面包含其他内容会造成无法提交订单。

下面的代码将演示如何使用易宝、支付宝来创建订单

{{{
private void CreateYeepayOrder()
{
    PaymentSetting<YeepayGateway> setting = new PaymentSetting<YeepayGateway>();
    setting.Merchant.UserName = "0000000000";
    setting.Merchant.Key = "00000000000000000000000000";
    setting.Merchant.NotifyUrl = new Uri("http://yousite.com/Payment/PaymentNotify.aspx");
    setting.Order.Amount = 0.01;
    setting.Order.OrderId = "104";

    setting.Payment();
}


private void CreateAlipayOrder()
{
    PaymentSetting<AlipayGateway> setting = new PaymentSetting<AlipayGateway>();
    setting.Gateway.SellerEmail = "name@address.com";
    setting.Merchant.UserName = "0000000000";
    setting.Merchant.Key = "00000000000000000000000000";
    setting.Merchant.NotifyUrl = new Uri("http://yousite.com/Payment/PaymentNotify.aspx");
    setting.Order.Amount = 0.01;
    setting.Order.OrderId = "104";

    setting.Payment();
}
}}}

在上面的代码我们使用了易宝YeepayGateway的支付网关，并设置了商户的密钥、订单的数据、接收网关支付通知的Url。在使用支付宝AlipayGateway时，需要注意这里需要额外的设置SellerEmail属性。


----
= 处理网关订单支付通知 =

在同一个页面接收多个不同的网关返回的付款通知，如下代码：
{{{
using ICanPay;

namespace Demo
{
    public partial class Notify : System.Web.UI.Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {
            GetNotify();
        }

        private void GetNotify()
        {
            // 商户的帐号跟密钥
            Merchant yeepayMerchant = new Merchant();
            yeepayMerchant.UserName = "10000432521";
            yeepayMerchant.Key = "8UPp0KE8sq73zVP370vko7C39403rtK1YwX40Td6irH216036H27Eb12792t";


            Merchant chinabankMerchat = new Merchant();
            chinabankMerchat.UserName = "00000000000";
            chinabankMerchat.Key = "0000000000000000000000000000000000000000000";

            PaymentNotify paymentNotify = PayGatewayFactory.GetGatewayNotify();

            // 没有收到可识别的网关通知
            if (paymentNotify == null)
            {
                return;
            }

            // 使用相应网关的商户数据以验证通知数据是否正确
            switch (paymentNotify.PayGateway.GatewayName)
            {
                case GatewayType.ChinaBank:
                    paymentNotify.PayGateway.Merchant = chinabankMerchat;

                    // 如果你知道服务器的网关IP，并且想加强安全性。
                    // 可以设置验证发送通知服务器的IP地址，并添加允许的服务器IP地址。
                    paymentNotify.PayGateway.ValidateNotifyHostServerAddress = true;
                    paymentNotify.PayGateway.SafeAddress.Add("129.1.12.52");
                    paymentNotify.PayGateway.SafeAddress.Add("129.1.12.51");
                    paymentNotify.PayGateway.SafeAddress.Add("129.1.12.50");
                    break;
                case GatewayType.YeePay:
                    paymentNotify.PayGateway.Merchant = yeepayMerchant;
                    break;
            }

            if (paymentNotify.HasNotify)
            {
                double amount = paymentNotify.PayGateway.Order.Amount;
                string orderId = paymentNotify.PayGateway.Order.OrderId;

                // 判断amount、orderId跟数据库订单记录是否符合，再处理付款。
            }
        }
    }
}

}}}

首先需要不同网关的不同商户数据，将用于核对订单的签名是否正确。

PayGatewayFactory的GetGatewayNotify方法将识别并创建正确的网关实现类。
{{{
PaymentNotify paymentNotify = PayGatewayFactory.GetGatewayNotify();
}}}

在使用之前需要知道是否接收到了可支持的网关返回的通知，如果没有接收到可识别的通知paymentNotify将为null 
{{{
paymentNotify == null
}}}

添加允许的IP地址，验证通知服务器的IP是否在内，以加强安全性。
{{{
paymentNotify.PayGateway.ValidateNotifyHostServerAddress = true;
paymentNotify.PayGateway.SafeAddress.Add("129.1.12.52");
paymentNotify.PayGateway.SafeAddress.Add("129.1.12.51");
paymentNotify.PayGateway.SafeAddress.Add("129.1.12.50");
}}}


验证接收到的网关通知是否正确，通知正确在这里做收到付款的逻辑处理。
{{{
if (paymentNotify.HasNotify)
{
    double amount = paymentNotify.PayGateway.Order.Amount;
    string orderId = paymentNotify.PayGateway.Order.OrderId;
    // 判断amount、orderId跟数据库订单记录是否符合，再处理付款。
}
}}}

----

= 查询订单 =

*查询订单有2种不同的方式*

1、查询订单跟提交订单的使用类似。提交查询以后，网关服务器给指定页面发送支付通知，然后你使用处理网关服务器返回付款通知一样的方法来处理订单的查询。

下面的代码演示了提交一个查询
{{{
private void QueryChinabankOrder()
{
    PaymentSetting<ChinabankGateway> setting = new PaymentSetting<ChinabankGateway>();
    setting.Merchant.UserName = "10000000000";
    setting.Merchant.Key = "0000000000000000000000000000000000000000";
    setting.Merchant.NotifyUrl = new Uri("http://yousite.com/Payment/PaymentNotify.aspx");
    setting.Order.OrderId = "1564515";

    setting.Query();
}
}}}

不是所有支付网关都支持查询，你通过PaymentSetting.CanQuery属性可以知道当前支付网关是否支持查询。支持查询订单的网关都实现了IQueryForm或者IQueryUrl接口。


2、有的支付网关是通过向支付网关查询页面POST需要查询的订单数据后，查询页面将输出查询结果。使用查询方式的支付网关都实现了IQueryPayment接口。

实现了ICheckPayment接口的网关，将使用如下方式查询订单的状态
{{{
private void QueryYeepayOrder()
{
    PaymentSetting<YeepayGateway> setting = new PaymentSetting<YeepayGateway>();
    setting.Merchant.UserName = "10000000000";
    setting.Merchant.Key = "0000000000000000000000000000000000000000";
    setting.Order.OrderId = "1564515";
    setting.Order.Amount = 0.01;

    if (setting.Gateway.QueryPayment())
    {
        // 订单已支付
    }
}
}}}